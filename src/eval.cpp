#include "eval.h"

struct ScorePair {
    i16 mg;
    i16 eg;

    constexpr ScorePair(i16 m, i16 e) : mg(m), eg(e) {}
};

// Helper to keep the tables readable
constexpr ScorePair S(i16 mg, i16 eg) { return {mg, eg}; }


constexpr array<ScorePair, 6> MATERIAL = {
    S(  63,  119),
    S( 267,  337),
    S( 301,  360),
    S( 381,  631),
    S( 769, 1197),
    S(   0,    0)
};

constexpr MultiArray<i64, 6, 64> PSQT_MG{{
    /* pawn */ {
           0,    0,    0,    0,    0,    0,    0,    0,
          73,   95,   73,  102,   86,   69,    3,  -22,
          -5,    9,   41,   47,   50,   71,   51,    9,
         -20,    4,    8,   10,   31,   22,   26,    3,
         -30,   -3,   -4,   12,   12,    4,   13,   -9,
         -32,   -7,   -7,   -6,    8,   -3,   27,   -2,
         -31,   -7,  -11,  -21,   -1,   13,   36,  -10,
           0,    0,    0,    0,    0,    0,    0,    0
    },
    /* knight */ {
        -142, -110,  -46,  -14,   17,  -39,  -92,  -87,
         -11,    6,   31,   48,   32,   93,    5,   28,
           4,   37,   54,   66,  102,  103,   60,   29,
           0,   13,   37,   57,   40,   64,   23,   33,
         -13,    2,   16,   17,   26,   21,   20,   -3,
         -32,  -10,    4,    7,   18,    8,   11,  -16,
         -45,  -33,  -17,   -5,   -4,   -2,  -15,  -18,
         -87,  -34,  -47,  -33,  -29,  -16,  -32,  -58
    },
    /* bishop */ {
         -26,  -44,  -33,  -74,  -63,  -45,  -16,  -53,
          -9,   14,    8,   -9,   19,   19,   11,    0,
           0,   23,   24,   47,   33,   64,   41,   29,
          -8,    6,   27,   37,   34,   30,    6,   -8,
         -14,   -2,    4,   24,   21,    7,   -1,   -6,
          -4,    3,    3,    6,    7,    2,    4,    8,
          -2,   -1,   10,  -11,   -4,    9,   15,    2,
         -23,   -4,  -19,  -28,  -23,  -24,    0,  -13
    },
    /* rook */ {
          29,   21,   28,   33,   51,   67,   50,   69,
          11,   10,   29,   49,   35,   63,   50,   80,
          -9,   11,   13,   16,   44,   45,   82,   60,
         -25,  -12,   -9,   -1,    5,    5,   13,   16,
         -43,  -41,  -31,  -19,  -19,  -34,  -11,  -19,
         -50,  -41,  -33,  -33,  -28,  -30,    3,  -18,
         -53,  -41,  -26,  -30,  -25,  -24,   -7,  -36,
         -34,  -33,  -24,  -18,  -14,  -24,  -10,  -33
    },
    /* queen */ {
         -36,  -28,    2,   35,   35,   40,   58,    5,
           1,  -21,  -14,  -21,  -16,   21,    1,   44,
           1,   -1,   -3,   13,   18,   59,   60,   57,
         -15,  -11,   -7,   -8,   -6,    7,    6,   13,
         -13,  -15,  -17,   -8,   -9,  -10,    1,    4,
         -16,   -9,  -14,  -15,  -12,   -5,    7,    1,
         -18,  -13,   -2,   -3,   -5,    4,   10,   21,
         -20,  -30,  -23,   -8,  -16,  -29,   -7,  -14
    },
    /* king */ {
          64,   40,   73,  -68,  -12,   38,   87,  194,
         -53,  -14,  -57,   50,   -3,    3,   42,   21,
         -74,   28,  -39,  -58,  -17,   58,   38,    2,
         -42,  -52,  -68, -112,  -99,  -62,  -62,  -85,
         -36,  -45,  -75, -102,  -99,  -63,  -67,  -90,
           8,   23,  -33,  -45,  -39,  -37,    9,   -8,
          95,   55,   41,    7,    6,   24,   71,   80,
          91,  114,   88,  -11,   53,   14,   95,   96
    }
}};

constexpr MultiArray<i64, 6, 64> PSQT_EG = {{
    /* pawn */ {
           0,    0,    0,    0,    0,    0,    0,    0,
         163,  155,  156,  107,  103,  114,  159,  173,
         104,  112,   78,   57,   49,   34,   81,   79,
          36,   25,    5,   -3,  -12,   -9,   10,   10,
          11,    8,   -9,  -12,  -14,  -12,   -1,   -8,
           5,    7,  -10,    2,   -6,   -8,   -3,  -12,
          10,   11,   -3,    3,    8,   -3,   -4,  -11,
           0,    0,    0,    0,    0,    0,    0,    0
    },
    /* knight */ {
         -75,  -15,   -1,   -9,   -6,  -29,   -8,  -97,
         -22,   -1,    7,    6,   -1,  -16,   -5,  -37,
          -6,    9,   25,   26,   11,    6,   -1,  -16,
           5,   26,   37,   39,   40,   34,   25,   -2,
           6,   15,   39,   39,   42,   32,   18,   -2,
          -9,    9,   19,   32,   31,   15,    4,   -7,
         -18,   -2,    6,   10,    9,    4,  -11,   -8,
         -25,  -38,   -9,   -6,   -5,  -15,  -31,  -37
    },
    /* bishop */ {
          -9,    2,   -1,   13,    6,   -3,  -10,  -12,
         -22,   -3,    1,    4,   -5,   -7,    1,  -24,
           7,    1,   12,    1,    6,    7,    0,    0,
           2,   18,   13,   26,   19,   16,   15,    2,
          -2,   15,   23,   19,   19,   18,   13,  -12,
          -2,    8,   16,   15,   19,   16,   -1,  -12,
          -8,   -7,   -9,    6,    8,   -4,   -2,  -27,
         -24,   -7,  -26,   -5,   -8,   -8,  -22,  -37
    },
    /* rook */ {
           9,   16,   25,   21,   12,    2,    4,   -1,
           9,   21,   25,   16,   16,    2,   -2,  -15,
           9,   12,   14,   12,   -1,   -7,  -16,  -20,
          11,   10,   19,   15,    0,   -5,   -9,  -15,
           4,    9,   11,   10,    6,    4,   -9,  -14,
           0,    0,   -1,    4,    0,   -8,  -28,  -27,
          -5,   -1,   -1,    1,   -7,  -11,  -20,  -15,
         -10,    0,    7,    6,   -2,   -7,  -11,  -18
    },
    /* queen */ {
           2,   15,   32,   18,   15,    8,  -35,   -4,
         -33,    9,   43,   60,   78,   37,   21,   -3,
         -22,   -5,   37,   38,   52,   32,   -4,  -17,
         -12,   11,   25,   49,   61,   47,   33,   12,
         -15,   14,   23,   42,   41,   32,   12,   -1,
         -26,  -10,   13,   11,   15,    6,  -16,  -28,
         -31,  -27,  -30,  -20,  -17,  -43,  -71, -101,
         -38,  -30,  -26,  -35,  -31,  -32,  -62,  -62
    },
    /* king */ {
        -103,  -53,  -44,    6,  -14,  -11,  -19, -126,
         -11,   18,   31,   12,   33,   45,   34,    4,
           5,   23,   42,   53,   52,   44,   43,   14,
          -5,   29,   46,   59,   58,   53,   44,   19,
         -17,   14,   37,   52,   51,   38,   27,   10,
         -27,   -4,   17,   29,   28,   20,    0,  -12,
         -49,  -22,   -9,    1,    5,   -5,  -23,  -41,
         -83,  -64,  -45,  -27,  -52,  -29,  -55,  -83
    }
}};

i32 evaluate(const Board& board) {
    i32 mg = 0;
    i32 eg = 0;

    u64 whitePieces = board.pieces(WHITE);
    u64 blackPieces = board.pieces(BLACK);

    while (whitePieces) {
        const Square sq = popLSB(whitePieces);
        const PieceType pt = board.getPiece(sq);

        mg += MATERIAL[pt].mg;
        eg += MATERIAL[pt].eg;

        mg += PSQT_MG[pt][sq];
        eg += PSQT_EG[pt][sq];
    }

    while (blackPieces) {
        const Square sq = flipRank(getLSB(blackPieces));
        const PieceType pt = board.getPiece(popLSB(blackPieces));

        mg -= MATERIAL[pt].mg;
        eg -= MATERIAL[pt].eg;

        mg -= PSQT_MG[pt][sq];
        eg -= PSQT_EG[pt][sq];
    }

    const i32 phase = 4 * popcount(board.pieces(QUEEN))
        + 2 * popcount(board.pieces(ROOK))
        + popcount(board.pieces(BISHOP))
        + popcount(board.pieces(KNIGHT));

    return (mg * std::min<i32>(phase, 24) + eg * (24 - std::min<i32>(phase, 24))) / 24 * (1 - 2 * (board.stm == BLACK));
};